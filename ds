// "use client";

// import React, { useState, useEffect } from "react";
// import {
//     Table,
//     TableHeader,
//     TableColumn,
//     TableBody,
//     TableRow,
//     TableCell,
//     Input,
//     Pagination,
//     Dropdown,
//     DropdownMenu,
//     DropdownItem,
// } from "@heroui/react";
// import toast from "react-hot-toast";
// import { useRouter } from "next/navigation";

// type User = {
//     id: string;
//     firstName: string;
//     lastName: string;
//     email: string;
//     skillLevel: string;
//     hasDashboardAccess: boolean; // Add this property
// };

// export default function UserTable() {
//     const [users, setUsers] = useState<User[]>([]);
//     const [currentPage, setCurrentPage] = useState(1);
//     const [totalPages, setTotalPages] = useState(1);
//     const [search, setSearch] = useState("");
//     const [loading, setLoading] = useState(false);

//     const router = useRouter();

//     const fetchUsers = async (page = 1, search = "") => {
//         setLoading(true);
//         try {
//             const response = await fetch(`/api/users?page=${page}&search=${search}`);
//             const data = await response.json();
//             setUsers(data.users);
//             setTotalPages(data.totalPages);
//             setCurrentPage(data.currentPage);
//         } catch (error) {
//             toast.error("Failed to fetch users");
//         } finally {
//             setLoading(false);
//         }
//     };

//     useEffect(() => {
//         fetchUsers(currentPage, search);
//     }, [currentPage, search]);

//     const handleDelete = async (id: string) => {
//         try {
//             const response = await fetch(`/api/users?id=${id}`, { method: "DELETE" });
//             const data = await response.json();

//             if (response.ok) {
//                 toast.success(data.message);
//                 fetchUsers(currentPage, search); // Refresh users
//             } else {
//                 toast.error(data.error || "Failed to delete user");
//             }
//         } catch (error) {
//             toast.error("Failed to delete user");
//         }
//     };

//     const handleDashboardAccess = async (id: string) => {
//         try {
//             const response = await fetch(`/api/users/dashboard-access`, {
//                 method: "POST",
//                 headers: {
//                     "Content-Type": "application/json",
//                 },
//                 body: JSON.stringify({ id }),
//             });
//             const data = await response.json();

//             if (response.ok) {
//                 toast.success(data.message);
//                 fetchUsers(currentPage, search); // Refresh users
//             } else {
//                 toast.error(data.error || "Failed to update dashboard access");
//             }
//         } catch (error) {
//             toast.error("Failed to update dashboard access");
//         }
//     };

//     const renderCell = (user: User, columnKey: string) => {
//         switch (columnKey) {
//             case "name":
//                 return `${user.firstName} ${user.lastName}`;
//             case "email":
//                 return user.email;
//             case "skillLevel":
//                 return user.skillLevel;
//             case "actions":
//                 return (
//                     <Dropdown>
//                         {[ // Wrap in an array
//                             <DropdownMenu aria-label="Actions" key="menu">
//                                 <DropdownItem
//                                     key="dashboard"
//                                     onClick={() => router.push(`/dashboard/${user.id}`)}
//                                 >
//                                     Give Dashboard Access
//                                 </DropdownItem>
//                                 <DropdownItem key="delete" onClick={() => handleDelete(user.id)}>
//                                     Delete User
//                                 </DropdownItem>
//                             </DropdownMenu>,
//                         ]}
//                     </Dropdown>
//                 );
//             default:
//                 return (user as any)[columnKey];
//         }
//     };

//     return (
//         <div className="p-4">
//             <Input
//                 placeholder="Search by name"
//                 value={search}
//                 onValueChange={(value) => setSearch(value)}
//                 isClearable
//                 className="mb-4"
//             />

//             {loading && <div className="text-center py-4">Loading...</div>}

//             {!loading && (
//                 <Table aria-label="User Table">
//                     <TableHeader>
//                         <TableColumn>ID</TableColumn>
//                         <TableColumn>NAME</TableColumn>
//                         <TableColumn>EMAIL</TableColumn>
//                         <TableColumn>SKILL LEVEL</TableColumn>
//                         <TableColumn>ACTIONS</TableColumn>
//                     </TableHeader>
//                     <TableBody>
//                         {users.map((user) => (
//                             <TableRow key={user.id}>
//                                 {["id", "name", "email", "skillLevel", "actions"].map((columnKey) => (
//                                     <TableCell key={columnKey}>{renderCell(user, columnKey)}</TableCell>
//                                 ))}
//                             </TableRow>
//                         ))}
//                     </TableBody>
//                 </Table>
//             )}

//             <Pagination
//                 page={currentPage}
//                 total={totalPages}
//                 onChange={(page) => setCurrentPage(page)}
//             />
//         </div>
//     );
// }

// // userdetails end tsx

// import { NextApiRequest, NextApiResponse } from "next";
// import { db } from "@/server/db";
// import { users } from "@/server/schema";
// import { sql } from "drizzle-orm";


// export default async function handler(req: NextApiRequest, res: NextApiResponse) {
//   if (req.method === "GET") {
//     try {
//       const { page = 1, search = "" } = req.query;
//       const limit = 10; // Number of users per page
//       const offset = (Number(page) - 1) * limit;

//       // Fetch users with pagination and search

//       const result = await db
//         .select()
//         .from(users)
//         .where(sql`${users.firstName} ILIKE ${`%${search}%`}`)
//         .offset(offset)
//         .limit(limit);


//       const totalUsers = await db
//         .select({ count: sql<number>`COUNT(${users.id})` })
//         .from(users);

//       res.status(200).json({
//         users: result,
//         totalUsers: totalUsers[0].count,
//         currentPage: Number(page),
//         totalPages: Math.ceil(totalUsers[0].count / limit),
//       });
//     } catch (error) {
//       console.error("Error fetching users:", error);
//       res.status(500).json({ error: "Failed to fetch users" });
//     }
//   } else if (req.method === "DELETE") {
//     try {
//       const { id } = req.query;

//       if (!id) {
//         return res.status(400).json({ error: "User ID is required" });
//       }

//       await db
//         .delete(users)
//         .where(sql`${users.id} = ${id}`);

//       res.status(200).json({ message: "User deleted successfully" });
//     } catch (error) {
//       console.error("Error deleting user:", error);
//       res.status(500).json({ error: "Failed to delete user" });
//     }
//   } else {
//     res.setHeader("Allow", ["GET", "DELETE"]);
//     res.status(405).end(`Method ${req.method} Not Allowed`);
//   }
// }




// // api of user

// // hasDashboardAccess: boolean("hasDashboardAccess").default(false), // Add this column
